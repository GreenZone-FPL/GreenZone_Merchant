import {io} from 'socket.io-client';
import {AppAsyncStorage} from '../utils';

class MerchantSocketService {
  constructor() {
    this.socket = null;
  }

  // Kh·ªüi t·∫°o k·∫øt n·ªëi socket
  async initialize() {
    if (!this.socket) {
      try {
        const token = await AppAsyncStorage.readData(
          AppAsyncStorage.STORAGE_KEYS.accessToken,
        );
        const storeId = await AppAsyncStorage.readData('storeId');
        // L·∫•y storeId t·ª´ AsyncStorage

        if (!token || !storeId) {
          console.log(
            'Kh√¥ng t√¨m th·∫•y token ho·∫∑c storeId, kh√¥ng th·ªÉ k·∫øt n·ªëi socket!',
          );
          return;
        }

        this.socket = io('https://greenzone.motcaiweb.io.vn', {
          path: '/socket.io/',
          transports: ['websocket'],
          auth: {token},
        });

        this.socket.on('connect', () => {
          console.log('Connected socketId =', this.socket.id);
          this.socket.emit('store.join', storeId);
        });

        this.socket.on('disconnect', () => {
          console.log('Socket disconnected');
        });


         socket.on('thuthao', data => {
           console.log('üì© Nh·∫≠n ƒë∆∞·ª£c s·ª± ki·ªán thuthao t·ª´ client:', data);
           socket.emit('thuthao', `Server ƒë√£ nh·∫≠n: ${data.message}`);
         });

         socket.on('disconnect', () => {
           console.log('‚ùå Client disconnected:', socket.id);
         });
       ;

        this.socket.on('order.updateStatus', data => {
          console.log('Tr·∫°ng th√°i ƒë∆°n h√†ng c·∫≠p nh·∫≠t:', data);
          // X·ª≠ l√Ω c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
          // B·∫°n c√≥ th·ªÉ g·ªçi m·ªôt callback ho·∫∑c c·∫≠p nh·∫≠t state ·ªü ƒë√¢y
        });
      } catch (error) {
        console.log('L·ªói khi kh·ªüi t·∫°o socket:', error);
      }
    }
  }

  emitThuThao() {
    if (this.socket) {
      this.socket.emit('thuthao', {message: 'abc'});
      console.log(`ƒê√£ emit event thuthao`);
    }
  }

  // Ki·ªÉm tra k·∫øt n·ªëi socket
  isConnected() {
    return this.socket && this.socket.connected;
  }

  // Ng·∫Øt k·∫øt n·ªëi socket
  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      console.log('Socket ƒë√£ ng·∫Øt k·∫øt n·ªëi');
    }
  }
}

export default new MerchantSocketService();
