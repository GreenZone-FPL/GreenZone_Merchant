import {io} from 'socket.io-client';
import {AppAsyncStorage} from '../utils';
import mitt from 'mitt';

class MerchantSocketService {
  constructor() {
    this.socket = null;
    this.emitter = mitt(); // T·∫°o emitter ƒë·ªÉ ph√°t s·ª± ki·ªán
  }

  async initialize() {
    if (!this.socket) {
      try {
        const token = await AppAsyncStorage.readData(
          AppAsyncStorage.STORAGE_KEYS.accessToken,
        );
        const storeId = await AppAsyncStorage.readData('storeId');
          console.log('üìå Token:', token);
          console.log('üìå storeId:', storeId); 

        if (!token || !storeId) {
          console.log(
            'Kh√¥ng t√¨m th·∫•y token ho·∫∑c storeId, kh√¥ng th·ªÉ k·∫øt n·ªëi socket!',
          );
          return;
        }

        this.socket = io('https://greenzone.motcaiweb.io.vn', {
          path: '/socket.io/',
          transports: ['websocket'],
          auth: {token},
        });

        this.socket.on('connect', () => {
          console.log('‚úÖ Merchant connected', this.socket.id);
          this.socket.emit('store.join', storeId);
          console.log(`üõí Merchant joined store room: ${storeId}`);
        });

        this.socket.on('order.new', data => {
          console.log('üì¶ New Order:', data);
          this.emitter.emit('order.new', data); 
        });

        this.socket.on('disconnect', () => {
          console.log('‚ùå Disconnected');
        });

        this.socket.on('connect_error', error => {
          console.error('‚ö†Ô∏è L·ªói k·∫øt n·ªëi:', error);
        });
      } catch (error) {
        console.log('L·ªói khi kh·ªüi t·∫°o socket:', error);
      }
    }
  }

  on(event, callback) {
    this.emitter.on(event, callback); // ƒêƒÉng k√Ω l·∫Øng nghe s·ª± ki·ªán
  }

  off(event, callback) {
    this.emitter.off(event, callback); // H·ªßy l·∫Øng nghe s·ª± ki·ªán
  }

  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      console.log('‚ùå Socket ƒë√£ ng·∫Øt k·∫øt n·ªëi');
    }
  }
}

export default new MerchantSocketService();
